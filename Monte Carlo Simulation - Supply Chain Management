{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/joshuabdixon/Monte-Carlo-Simulation-Supply-Chain-Management/blob/main/Monte%20Carlo%20Simulation%20-%20Supply%20Chain%20Management\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Activity 1.3.3: Simulating random events using Python\n",
        "\n",
        "## Supply Chain Management\n",
        "- Supply chain management: Uncertainty in demand, transportation delays, and supply disruptions can impact the efficiency of supply chains, requiring optimisation and risk mitigation."
      ],
      "metadata": {
        "id": "gJPNdTwcSOB5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Problem Statement:**\n",
        " **Company A** faces significant uncertainties with product demand variability, transportation delays, and supply disruptions. To navigate these challenges, the company aims to use probability models to ensure it means inventory levels to meet daily demands for the next year.\n",
        "\n",
        " The strategic use of these models is expected to guide **Company A** in maintaining optimal inventory levels and mitigating risks associated with transportation delays and supply chain volatility.\n",
        "\n",
        " Ineffectively addressing these issues risks inventory misalignment with demand—either surplus leading to increased storage costs or deficits resulting in lost sales—each pathway potentially culminating in decreased revenue."
      ],
      "metadata": {
        "id": "d1ileq8UBVRP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Key Variables:\n",
        "- Quantity in Stock: Current inventory levels for each product.\n",
        "- Reorder Level: The predefined inventory level at which new orders should be placed.\n",
        "- Unit Price: Cost per unit of product. It is assumed to be in GBP (£).\n",
        "- Shipping Lead Time (days): Time taken for products to be delivered. A new order cannot be places if an existing order is on the way.\n",
        "- Demand Forecast (Next Month): Projected customer demand for the upcoming month (Units of product predicted to be sold in the next month)."
      ],
      "metadata": {
        "id": "INNiDJADCNx0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Assumptions\n",
        "- The data is assumed to be Normally Distributed\n",
        "- Typically, there are 252 working days in a year, excluding weekends and bank holidays. The model will run for this duration.\n",
        "- There are 21 working days in a month.\n",
        "- The **Demand Forecast (Next Month)** variable is assumed to increase by 1% per month. This will be adjusted with the variable: *demand_forecast_growth_rate*.\n",
        "- **Unit price** has been assumed to increase due to inflation by 2% per month with the variable: *unit_price_increase*\n",
        "- A variance of 5% of the previous months demand forecast will be assumed with the variable:*demand_growth_variance*\n",
        "- The unit price variance is equal to 5% of its current price with the variable: *unit_price_variance*\n",
        "- **Shipping Lead Time (days)** is assumed to be an average based on Company A's historical data.\n",
        "- **Shipping Lead Time (days)** has a variance of 1 day, with the variable: *lead_time_variance*\n",
        "- **Order Quantity**: The order_quantity variable represents the order quantity, which is calculated via *daily_demand* x *mean_lead_time* x *reorder_buffer* (see next bullet point). This ensures there is enough stock to manage the demand during days leading up to the next order arrival date.\n",
        "- **Reorder Buffer**: This variable has been introduced for added safety and reduce the risk of stockouts. The *reorder_buffer* variable has been set equal to 1.5 (50% more stock than required will be ordered).  \n",
        "- It is assumed **Shipping Lead Time** is averaged or typical based on historical data for each product\n"
      ],
      "metadata": {
        "id": "XqRO8nDEoHyb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Monte-Carlo Model\n",
        "- Over 252 business days, the Monte Carlo Simulation (MCS) evaluates inventory against demand.\n",
        "- Demand and unit prices are recalculated every 21 days, incorporating a growth rate and variability.\n",
        "- Reorders are placed when inventory drops below the set level, with lead time uncertainty accounted for by the MCS.\n",
        "- Costs are based on current prices.\n",
        "- After 200 runs, the MCS provides average stockout frequency and cost of the total inventory.\n"
      ],
      "metadata": {
        "id": "4OhJu-IBW90w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Observations and Results\n",
        "- Most products have an average stockout close to zero, either indicating effective inventory control or overstocking.\n",
        "- There are outlier products with much higher average stockouts, which could indicate specific issues with those products that need addressing.\n",
        "\n",
        "### Suggested implementations\n",
        "- **For low-stockout products:** Evaluate if it's possible to reduce safety stock levels without significantly increasing stockout risk to free up capital.\n",
        "- **For high-stockout products:** Investigate the reasons behind the frequent stockouts—consider improving demand forecasting, reviewing supplier performance, or adjusting the reorder level.\n",
        "- **Cost Reduction:** Review procurement and logistics strategies to lower the total order cost, especially for products with high average total order costs.\n",
        "- **Overall strategy:** Consider segmenting products based on their stockout profile and tailoring inventory strategies accordingly, such as implementing a more aggressive inventory reduction for stable-demand products and a robust inventory buffer for those with unpredictable demand."
      ],
      "metadata": {
        "id": "ijySHe_ZahIY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Monte Carlo Simulation"
      ],
      "metadata": {
        "id": "JYpo6nVojviW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Set the simulation parameters\n",
        "demand_forecast_growth_rate = 1.01\n",
        "demand_forecast_variance = 0.15\n",
        "unit_price_growth_rate = 1.02\n",
        "unit_price_variance = 0.15\n",
        "lead_time_variance = 1\n",
        "lead_time_std = np.sqrt(lead_time_variance)\n",
        "reorder_buffer = 1.5\n",
        "num_days = 252  # Number of business days in a year\n",
        "num_simulations = 200  # Number of simulation iterations\n",
        "period = num_days + 1  # Period for the simulation, which includes the first day"
      ],
      "metadata": {
        "id": "cAocu_KdFdZh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and view the supply chain data\n",
        "data1 = pd.read_csv(\"https://raw.githubusercontent.com/fourthrevlxd/cam_dsb/main/supply_chain_management_dataset.csv\")\n",
        "data1.head(5)"
      ],
      "metadata": {
        "id": "sIbzEGjFkb4Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "3319e8c1-1890-4755-f3bf-e023eea0f0d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Product ID Product Name Supplier ID Supplier Name  Quantity in Stock  \\\n",
              "0      P0001    Product 1          S7    Supplier 3                143   \n",
              "1      P0002    Product 2          S7   Supplier 12                253   \n",
              "2      P0003    Product 3          S9   Supplier 16                341   \n",
              "3      P0004    Product 4          S1    Supplier 3                489   \n",
              "4      P0005    Product 5          S1   Supplier 10                415   \n",
              "\n",
              "   Reorder Level  Unit Price  Shipping Lead Time (days)  \\\n",
              "0             83       60.17                          1   \n",
              "1             82       78.70                          5   \n",
              "2             97       24.70                          5   \n",
              "3             77      161.27                          7   \n",
              "4             95      160.42                          6   \n",
              "\n",
              "   Demand Forecast (Next Month)  \n",
              "0                           355  \n",
              "1                            39  \n",
              "2                           195  \n",
              "3                           223  \n",
              "4                           296  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ddd2f6f-e0f2-4bde-98ff-324b9319de45\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product ID</th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Supplier ID</th>\n",
              "      <th>Supplier Name</th>\n",
              "      <th>Quantity in Stock</th>\n",
              "      <th>Reorder Level</th>\n",
              "      <th>Unit Price</th>\n",
              "      <th>Shipping Lead Time (days)</th>\n",
              "      <th>Demand Forecast (Next Month)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P0001</td>\n",
              "      <td>Product 1</td>\n",
              "      <td>S7</td>\n",
              "      <td>Supplier 3</td>\n",
              "      <td>143</td>\n",
              "      <td>83</td>\n",
              "      <td>60.17</td>\n",
              "      <td>1</td>\n",
              "      <td>355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P0002</td>\n",
              "      <td>Product 2</td>\n",
              "      <td>S7</td>\n",
              "      <td>Supplier 12</td>\n",
              "      <td>253</td>\n",
              "      <td>82</td>\n",
              "      <td>78.70</td>\n",
              "      <td>5</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P0003</td>\n",
              "      <td>Product 3</td>\n",
              "      <td>S9</td>\n",
              "      <td>Supplier 16</td>\n",
              "      <td>341</td>\n",
              "      <td>97</td>\n",
              "      <td>24.70</td>\n",
              "      <td>5</td>\n",
              "      <td>195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P0004</td>\n",
              "      <td>Product 4</td>\n",
              "      <td>S1</td>\n",
              "      <td>Supplier 3</td>\n",
              "      <td>489</td>\n",
              "      <td>77</td>\n",
              "      <td>161.27</td>\n",
              "      <td>7</td>\n",
              "      <td>223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P0005</td>\n",
              "      <td>Product 5</td>\n",
              "      <td>S1</td>\n",
              "      <td>Supplier 10</td>\n",
              "      <td>415</td>\n",
              "      <td>95</td>\n",
              "      <td>160.42</td>\n",
              "      <td>6</td>\n",
              "      <td>296</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ddd2f6f-e0f2-4bde-98ff-324b9319de45')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ddd2f6f-e0f2-4bde-98ff-324b9319de45 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ddd2f6f-e0f2-4bde-98ff-324b9319de45');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3897f94a-89cc-40bf-a230-56fe05d2260d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3897f94a-89cc-40bf-a230-56fe05d2260d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3897f94a-89cc-40bf-a230-56fe05d2260d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data1",
              "summary": "{\n  \"name\": \"data1\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Product ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"P0084\",\n          \"P0054\",\n          \"P0071\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"Product 84\",\n          \"Product 54\",\n          \"Product 71\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Supplier ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"S7\",\n          \"S10\",\n          \"S18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Supplier Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"Supplier 3\",\n          \"Supplier 17\",\n          \"Supplier 19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity in Stock\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 148,\n        \"min\": 4,\n        \"max\": 498,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          89,\n          221,\n          476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reorder Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 50,\n        \"max\": 199,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          95,\n          101,\n          139\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unit Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.00819386543834,\n        \"min\": 13.31,\n        \"max\": 199.32,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          63.12,\n          199.32,\n          89.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shipping Lead Time (days)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand Forecast (Next Month)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 133,\n        \"min\": 21,\n        \"max\": 476,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          354,\n          355,\n          401\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pXHttE2HZBID",
        "outputId": "71b7b669-d1e6-4091-9a77-c1a24518769f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100 entries, 0 to 99\n",
            "Data columns (total 9 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   Product ID                    100 non-null    object \n",
            " 1   Product Name                  100 non-null    object \n",
            " 2   Supplier ID                   100 non-null    object \n",
            " 3   Supplier Name                 100 non-null    object \n",
            " 4   Quantity in Stock             100 non-null    int64  \n",
            " 5   Reorder Level                 100 non-null    int64  \n",
            " 6   Unit Price                    100 non-null    float64\n",
            " 7   Shipping Lead Time (days)     100 non-null    int64  \n",
            " 8   Demand Forecast (Next Month)  100 non-null    int64  \n",
            "dtypes: float64(1), int64(4), object(4)\n",
            "memory usage: 7.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the Monte Carlo simulation function\n",
        "def monte_carlo(row, period):\n",
        "    \"\"\"\n",
        "    Perform a Monte Carlo simulation for supply chain management over a given period.\n",
        "\n",
        "    This function simulates the inventory levels based on demand forecast growth, unit price variance,\n",
        "    and shipping lead time variance. It places orders when the stock level falls below the reorder level\n",
        "    and takes into account the lead time for the orders to arrive.\n",
        "\n",
        "    Args:\n",
        "      row (pd.Series): A pandas Series object representing a row from the dataframe.\n",
        "      period (int): The number of days to run the simulation, typically set to the number of business days in a year.\n",
        "\n",
        "    Returns:\n",
        "      tuple: A tuple containing three elements:\n",
        "             - An array representing the daily stock levels throughout the simulation period.\n",
        "             - The total number of stockouts (int), i.e., days where the demand exceeds the stock level.\n",
        "             - The total cost of orders (float) placed throughout the simulation period.\n",
        "    \"\"\"\n",
        "    # Unpack necessary values from the row\n",
        "    reorder_level = row['Reorder Level']\n",
        "    lead_time = row['Shipping Lead Time (days)']\n",
        "    current_demand_forecast = row['Demand Forecast (Next Month)']\n",
        "    current_unit_price = row['Unit Price']\n",
        "\n",
        "    # Initialise arrays to store stock levels and pending orders\n",
        "    stock = np.zeros(period)\n",
        "    stock[0] = row[\"Quantity in Stock\"]\n",
        "    pending_orders = np.zeros(period)\n",
        "\n",
        "    # Initialise simulation variables\n",
        "    order_in_transit = False\n",
        "    scheduled_arrival_day = 0\n",
        "    total_stockouts = 0\n",
        "    total_order_cost = 0\n",
        "\n",
        "   # Run the simulation for the specified period\n",
        "    for day in range(1, period):\n",
        "        # Update demand forecast and unit price every 21 days\n",
        "        if day % 21 == 0:\n",
        "            current_demand_forecast *= demand_forecast_growth_rate\n",
        "            current_demand_forecast += np.random.normal(0, current_demand_forecast * demand_forecast_variance)\n",
        "            current_demand_forecast = max(current_demand_forecast, 0)\n",
        "            current_unit_price *= unit_price_growth_rate\n",
        "            current_unit_price += np.random.normal(0, current_unit_price * unit_price_variance)\n",
        "            current_unit_price = max(current_unit_price, 0)\n",
        "\n",
        "        # Calculate daily demand\n",
        "        daily_demand = current_demand_forecast / 21\n",
        "\n",
        "        # Process pending orders and update stock levels\n",
        "        if pending_orders[day] > 0:\n",
        "            stock[day] = stock[day - 1] + pending_orders[day]\n",
        "            if day == scheduled_arrival_day:\n",
        "                order_in_transit = False\n",
        "        else:\n",
        "            stock[day] = stock[day - 1]\n",
        "\n",
        "        # Decrease stock by daily demand and record stockouts\n",
        "        stock[day] -= daily_demand\n",
        "        if stock[day] < 0:\n",
        "            stock[day] = 0\n",
        "            total_stockouts += 1\n",
        "\n",
        "        # Place new orders if below reorder level and no order is in transit\n",
        "        if stock[day] < reorder_level and not order_in_transit:\n",
        "            simulated_lead_time = int(np.random.normal(lead_time, lead_time_std))\n",
        "            simulated_lead_time = max(simulated_lead_time, 1)\n",
        "            arrival_day = day + simulated_lead_time\n",
        "            if arrival_day < period:\n",
        "                order_quantity = daily_demand * lead_time * reorder_buffer\n",
        "                pending_orders[arrival_day] += order_quantity\n",
        "                order_cost = order_quantity * current_unit_price\n",
        "                total_order_cost += order_cost\n",
        "                order_in_transit = True\n",
        "                scheduled_arrival_day = arrival_day\n",
        "\n",
        "    # Return the simulation results\n",
        "    return stock, total_stockouts, total_order_cost"
      ],
      "metadata": {
        "id": "1autfF39BRq4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Run simulations for all products in the dataset\n",
        "def run_simulations_for_all_products(data, num_simulations, period):\n",
        "    \"\"\"\n",
        "    Run Monte Carlo simulations for each product in the dataset to evaluate inventory management performance.\n",
        "\n",
        "    This function iterates through each product in the provided dataset and runs multiple Monte Carlo simulations\n",
        "    to assess the effects of demand and supply variability on stock levels and ordering costs. It calculates the\n",
        "    average number of stockouts and total order costs across all simulations for each product.\n",
        "\n",
        "    Args:\n",
        "      data (pd.DataFrame): The Supply Chain Management Data\n",
        "      num_simulations (int): Number of Monte Carlo simulation iterations for each product.\n",
        "      period (int): Number of days for each simulation iteration.\n",
        "\n",
        "    Returns:\n",
        "      dict: A dictionary with 'Product ID' as keys, each associated with another dictionary containing\n",
        "            'average_num_of_stockouts' and 'average_total_order_cost' which are the computed averages of\n",
        "            stockouts and order costs across simulations.\n",
        "    \"\"\"\n",
        "    results = {}\n",
        "    for index, row in data.iterrows():\n",
        "        product_id = row['Product ID']\n",
        "        total_stockouts_per_product = []\n",
        "        total_order_costs_per_product = []\n",
        "\n",
        "        # Run multiple simulations per product\n",
        "        for simulation in range(num_simulations):\n",
        "            _, total_stockouts, total_order_cost = monte_carlo(row, period)\n",
        "            total_stockouts_per_product.append(total_stockouts)\n",
        "            total_order_costs_per_product.append(total_order_cost)\n",
        "\n",
        "        # Calculate average metrics per product\n",
        "        average_num_of_stockouts = sum(total_stockouts_per_product) / num_simulations\n",
        "        average_total_order_cost = sum(total_order_costs_per_product) / num_simulations\n",
        "        results[product_id] = {\n",
        "            'average_num_of_stockouts': average_num_of_stockouts,\n",
        "            'average_total_order_cost': average_total_order_cost\n",
        "        }\n",
        "\n",
        "    return results"
      ],
      "metadata": {
        "id": "NKnvPYiXBkIn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Run simulation and obtain results\n",
        "simulation_results_for_all_products = run_simulations_for_all_products(data1, num_simulations, period)\n",
        "\n",
        "# Plot the results in a histogram\n",
        "average_stockouts = [stats['average_num_of_stockouts'] for stats in simulation_results_for_all_products.values()]\n",
        "total_average_order_cost = sum(stats['average_total_order_cost'] for stats in simulation_results_for_all_products.values())\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(average_stockouts, bins=20)\n",
        "plt.title('Number of Days Stock Was Below Daily Demand by Product for Year 2024/25\\n'\n",
        "          f'Total Order Cost: £{total_average_order_cost:,.0f}', pad=10)\n",
        "plt.xlabel('Average Number of Stockouts / Days Below Demand')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "OBU-pEB5IBNF",
        "outputId": "8bb3e580-23cf-4a93-daa6-2ea59bed49e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for product_id, stats in simulation_results_for_all_products.items():\n",
        "    print(f\"Product: {product_id}\")\n",
        "    print(f\"Average number of stockouts: {stats['average_num_of_stockouts']:.2f}\")\n",
        "    print(f\"Average total order cost: £{stats['average_total_order_cost']:.2f}\")\n",
        "    print() # Added for clarity\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcpNzWhkKdMi",
        "outputId": "4dab4e82-ac4a-4dc8-ad3f-fd789871afe4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Product: P0001\n",
            "Average number of stockouts: 0.46\n",
            "Average total order cost: £290525.46\n",
            "\n",
            "Product: P0002\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £30517.71\n",
            "\n",
            "Product: P0003\n",
            "Average number of stockouts: 0.48\n",
            "Average total order cost: £60258.11\n",
            "\n",
            "Product: P0004\n",
            "Average number of stockouts: 12.83\n",
            "Average total order cost: £445058.28\n",
            "\n",
            "Product: P0005\n",
            "Average number of stockouts: 8.20\n",
            "Average total order cost: £588505.01\n",
            "\n",
            "Product: P0006\n",
            "Average number of stockouts: 19.68\n",
            "Average total order cost: £262137.78\n",
            "\n",
            "Product: P0007\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £66965.26\n",
            "\n",
            "Product: P0008\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £2840.69\n",
            "\n",
            "Product: P0009\n",
            "Average number of stockouts: 29.51\n",
            "Average total order cost: £327632.76\n",
            "\n",
            "Product: P0010\n",
            "Average number of stockouts: 13.20\n",
            "Average total order cost: £117768.59\n",
            "\n",
            "Product: P0011\n",
            "Average number of stockouts: 0.03\n",
            "Average total order cost: £132712.90\n",
            "\n",
            "Product: P0012\n",
            "Average number of stockouts: 0.09\n",
            "Average total order cost: £533456.00\n",
            "\n",
            "Product: P0013\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £28067.62\n",
            "\n",
            "Product: P0014\n",
            "Average number of stockouts: 64.67\n",
            "Average total order cost: £327280.01\n",
            "\n",
            "Product: P0015\n",
            "Average number of stockouts: 6.74\n",
            "Average total order cost: £174510.12\n",
            "\n",
            "Product: P0016\n",
            "Average number of stockouts: 0.27\n",
            "Average total order cost: £178148.27\n",
            "\n",
            "Product: P0017\n",
            "Average number of stockouts: 0.06\n",
            "Average total order cost: £828937.15\n",
            "\n",
            "Product: P0018\n",
            "Average number of stockouts: 1.04\n",
            "Average total order cost: £140156.31\n",
            "\n",
            "Product: P0019\n",
            "Average number of stockouts: 0.85\n",
            "Average total order cost: £309955.10\n",
            "\n",
            "Product: P0020\n",
            "Average number of stockouts: 29.77\n",
            "Average total order cost: £475772.16\n",
            "\n",
            "Product: P0021\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £193789.24\n",
            "\n",
            "Product: P0022\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £17623.50\n",
            "\n",
            "Product: P0023\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £23764.27\n",
            "\n",
            "Product: P0024\n",
            "Average number of stockouts: 0.81\n",
            "Average total order cost: £452250.08\n",
            "\n",
            "Product: P0025\n",
            "Average number of stockouts: 13.14\n",
            "Average total order cost: £876752.51\n",
            "\n",
            "Product: P0026\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £64340.26\n",
            "\n",
            "Product: P0027\n",
            "Average number of stockouts: 53.51\n",
            "Average total order cost: £417147.74\n",
            "\n",
            "Product: P0028\n",
            "Average number of stockouts: 2.05\n",
            "Average total order cost: £124630.48\n",
            "\n",
            "Product: P0029\n",
            "Average number of stockouts: 2.50\n",
            "Average total order cost: £239054.28\n",
            "\n",
            "Product: P0030\n",
            "Average number of stockouts: 26.69\n",
            "Average total order cost: £280628.20\n",
            "\n",
            "Product: P0031\n",
            "Average number of stockouts: 41.87\n",
            "Average total order cost: £832225.23\n",
            "\n",
            "Product: P0032\n",
            "Average number of stockouts: 9.32\n",
            "Average total order cost: £524938.32\n",
            "\n",
            "Product: P0033\n",
            "Average number of stockouts: 17.45\n",
            "Average total order cost: £352212.48\n",
            "\n",
            "Product: P0034\n",
            "Average number of stockouts: 0.82\n",
            "Average total order cost: £300618.23\n",
            "\n",
            "Product: P0035\n",
            "Average number of stockouts: 1.17\n",
            "Average total order cost: £828562.03\n",
            "\n",
            "Product: P0036\n",
            "Average number of stockouts: 2.71\n",
            "Average total order cost: £490159.38\n",
            "\n",
            "Product: P0037\n",
            "Average number of stockouts: 88.84\n",
            "Average total order cost: £606561.44\n",
            "\n",
            "Product: P0038\n",
            "Average number of stockouts: 13.93\n",
            "Average total order cost: £281412.22\n",
            "\n",
            "Product: P0039\n",
            "Average number of stockouts: 0.07\n",
            "Average total order cost: £449851.45\n",
            "\n",
            "Product: P0040\n",
            "Average number of stockouts: 48.72\n",
            "Average total order cost: £509846.98\n",
            "\n",
            "Product: P0041\n",
            "Average number of stockouts: 64.99\n",
            "Average total order cost: £90948.95\n",
            "\n",
            "Product: P0042\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £252215.99\n",
            "\n",
            "Product: P0043\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £15886.81\n",
            "\n",
            "Product: P0044\n",
            "Average number of stockouts: 1.51\n",
            "Average total order cost: £385338.32\n",
            "\n",
            "Product: P0045\n",
            "Average number of stockouts: 0.30\n",
            "Average total order cost: £915098.58\n",
            "\n",
            "Product: P0046\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £173192.51\n",
            "\n",
            "Product: P0047\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £51758.69\n",
            "\n",
            "Product: P0048\n",
            "Average number of stockouts: 0.10\n",
            "Average total order cost: £227064.11\n",
            "\n",
            "Product: P0049\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £49870.21\n",
            "\n",
            "Product: P0050\n",
            "Average number of stockouts: 69.28\n",
            "Average total order cost: £387149.28\n",
            "\n",
            "Product: P0051\n",
            "Average number of stockouts: 10.87\n",
            "Average total order cost: £391993.28\n",
            "\n",
            "Product: P0052\n",
            "Average number of stockouts: 0.01\n",
            "Average total order cost: £265415.33\n",
            "\n",
            "Product: P0053\n",
            "Average number of stockouts: 0.11\n",
            "Average total order cost: £59175.33\n",
            "\n",
            "Product: P0054\n",
            "Average number of stockouts: 2.88\n",
            "Average total order cost: £612125.21\n",
            "\n",
            "Product: P0055\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £70751.09\n",
            "\n",
            "Product: P0056\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £68521.58\n",
            "\n",
            "Product: P0057\n",
            "Average number of stockouts: 57.99\n",
            "Average total order cost: £318082.55\n",
            "\n",
            "Product: P0058\n",
            "Average number of stockouts: 76.42\n",
            "Average total order cost: £535338.59\n",
            "\n",
            "Product: P0059\n",
            "Average number of stockouts: 2.94\n",
            "Average total order cost: £297372.69\n",
            "\n",
            "Product: P0060\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £38092.17\n",
            "\n",
            "Product: P0061\n",
            "Average number of stockouts: 46.03\n",
            "Average total order cost: £756657.51\n",
            "\n",
            "Product: P0062\n",
            "Average number of stockouts: 11.04\n",
            "Average total order cost: £190570.76\n",
            "\n",
            "Product: P0063\n",
            "Average number of stockouts: 7.78\n",
            "Average total order cost: £437226.22\n",
            "\n",
            "Product: P0064\n",
            "Average number of stockouts: 0.23\n",
            "Average total order cost: £734614.14\n",
            "\n",
            "Product: P0065\n",
            "Average number of stockouts: 19.64\n",
            "Average total order cost: £929684.47\n",
            "\n",
            "Product: P0066\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £7975.86\n",
            "\n",
            "Product: P0067\n",
            "Average number of stockouts: 0.47\n",
            "Average total order cost: £655203.33\n",
            "\n",
            "Product: P0068\n",
            "Average number of stockouts: 0.09\n",
            "Average total order cost: £452630.21\n",
            "\n",
            "Product: P0069\n",
            "Average number of stockouts: 57.30\n",
            "Average total order cost: £700176.30\n",
            "\n",
            "Product: P0070\n",
            "Average number of stockouts: 0.03\n",
            "Average total order cost: £262271.72\n",
            "\n",
            "Product: P0071\n",
            "Average number of stockouts: 9.38\n",
            "Average total order cost: £355678.56\n",
            "\n",
            "Product: P0072\n",
            "Average number of stockouts: 2.17\n",
            "Average total order cost: £234059.45\n",
            "\n",
            "Product: P0073\n",
            "Average number of stockouts: 50.67\n",
            "Average total order cost: £510057.70\n",
            "\n",
            "Product: P0074\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £224577.05\n",
            "\n",
            "Product: P0075\n",
            "Average number of stockouts: 1.62\n",
            "Average total order cost: £392158.13\n",
            "\n",
            "Product: P0076\n",
            "Average number of stockouts: 3.56\n",
            "Average total order cost: £118310.72\n",
            "\n",
            "Product: P0077\n",
            "Average number of stockouts: 7.42\n",
            "Average total order cost: £690121.66\n",
            "\n",
            "Product: P0078\n",
            "Average number of stockouts: 73.47\n",
            "Average total order cost: £394626.79\n",
            "\n",
            "Product: P0079\n",
            "Average number of stockouts: 8.57\n",
            "Average total order cost: £589972.42\n",
            "\n",
            "Product: P0080\n",
            "Average number of stockouts: 0.53\n",
            "Average total order cost: £271702.33\n",
            "\n",
            "Product: P0081\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £48892.58\n",
            "\n",
            "Product: P0082\n",
            "Average number of stockouts: 2.06\n",
            "Average total order cost: £867494.05\n",
            "\n",
            "Product: P0083\n",
            "Average number of stockouts: 0.76\n",
            "Average total order cost: £592511.51\n",
            "\n",
            "Product: P0084\n",
            "Average number of stockouts: 77.69\n",
            "Average total order cost: £265901.19\n",
            "\n",
            "Product: P0085\n",
            "Average number of stockouts: 0.63\n",
            "Average total order cost: £207922.42\n",
            "\n",
            "Product: P0086\n",
            "Average number of stockouts: 30.52\n",
            "Average total order cost: £316772.37\n",
            "\n",
            "Product: P0087\n",
            "Average number of stockouts: 1.50\n",
            "Average total order cost: £352814.20\n",
            "\n",
            "Product: P0088\n",
            "Average number of stockouts: 37.17\n",
            "Average total order cost: £98173.39\n",
            "\n",
            "Product: P0089\n",
            "Average number of stockouts: 6.58\n",
            "Average total order cost: £71373.52\n",
            "\n",
            "Product: P0090\n",
            "Average number of stockouts: 53.48\n",
            "Average total order cost: £223428.07\n",
            "\n",
            "Product: P0091\n",
            "Average number of stockouts: 20.55\n",
            "Average total order cost: £211487.71\n",
            "\n",
            "Product: P0092\n",
            "Average number of stockouts: 2.65\n",
            "Average total order cost: £639477.09\n",
            "\n",
            "Product: P0093\n",
            "Average number of stockouts: 3.54\n",
            "Average total order cost: £167914.46\n",
            "\n",
            "Product: P0094\n",
            "Average number of stockouts: 0.00\n",
            "Average total order cost: £41118.48\n",
            "\n",
            "Product: P0095\n",
            "Average number of stockouts: 0.06\n",
            "Average total order cost: £696870.80\n",
            "\n",
            "Product: P0096\n",
            "Average number of stockouts: 7.02\n",
            "Average total order cost: £458260.96\n",
            "\n",
            "Product: P0097\n",
            "Average number of stockouts: 56.16\n",
            "Average total order cost: £373997.39\n",
            "\n",
            "Product: P0098\n",
            "Average number of stockouts: 1.44\n",
            "Average total order cost: £76344.49\n",
            "\n",
            "Product: P0099\n",
            "Average number of stockouts: 65.91\n",
            "Average total order cost: £329818.65\n",
            "\n",
            "Product: P0100\n",
            "Average number of stockouts: 72.90\n",
            "Average total order cost: £280145.52\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CeDSELCIWt8B"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}